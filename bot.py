import os
import json
import asyncio
from datetime import datetime, timedelta, timezone
import requests
from telethon import TelegramClient, events, Button
from telethon.tl.functions.account import ReportPeerRequest
from telethon.tl.types import (
    InputReportReasonSpam,
    InputReportReasonFake,
    InputReportReasonOther,
)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
SEMD = '440506:AAk6tpDL2MmNdUDA2vHHNxjjnIRohXp5z2n'
BOT_TOKEN = '7568569882:AAEyfdy7c8Q1U3XsoU2sYNvmT1bjXHDuJRU'
API_ID = 27633578
API_HASH = '98a87b483bf61af442c21ab1fd8c06e1'
CRYPTOBOT_API_TOKEN = SEMD  # Same as bot token for CryptoBot API
SESSIONS_DIR = 'sessions'
OWNER_ID = 6971683917  # Your user_id
SUBS_FILE = 'subs.json'
LOG_ID = 6971683917
CRYPTOBOT_API_URL = 'https://pay.crypt.bot/api'

session_clients = []
user_states = {}  # user_id: 'awaiting_username'
subscriptions = {}  # user_id: expire_iso
pending_payments = {}  # user_id: {'invoice_id': str, 'amount': float, 'duration': int}

# === –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï .session ===
def load_sessions():
    for file in os.listdir(SESSIONS_DIR):
        if file.endswith('.session'):
            path = os.path.join(SESSIONS_DIR, file)
            client = TelegramClient(path, API_ID, API_HASH)
            session_clients.append(client)

# === –†–ê–ë–û–¢–ê –° –ü–û–î–ü–ò–°–ö–ê–ú–ò ===
def load_subs():
    global subscriptions
    if os.path.exists(SUBS_FILE):
        with open(SUBS_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if content:
                subscriptions = json.loads(content)
            else:
                subscriptions = {}
    else:
        subscriptions = {}

def save_subs():
    with open(SUBS_FILE, 'w', encoding='utf-8') as f:
        json.dump(subscriptions, f, indent=2, ensure_ascii=False)

def is_subscribed(user_id):
    if str(user_id) not in subscriptions:
        return False
    expire_time = datetime.fromisoformat(subscriptions[str(user_id)])
    if expire_time.tzinfo is None:
        expire_time = expire_time.replace(tzinfo=timezone.utc)
    return datetime.now(timezone.utc) < expire_time

def set_subscription(user_id, minutes):
    expire_time = datetime.now(timezone.utc) + timedelta(minutes=minutes)
    subscriptions[str(user_id)] = expire_time.isoformat()
    save_subs()

# === CRYPTOBOT API FUNCTIONS ===
def create_invoice(amount, currency='USD', description='Subscription', asset='USDT'):
    headers = {'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN}
    payload = {
        'amount': amount,
        'currency': currency,
        'description': description,
        'currency_type': 'crypto',  # Explicitly set to crypto
        'asset': asset  # Required for crypto invoices
    }
    response = requests.post(f'{CRYPTOBOT_API_URL}/createInvoice', json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()['result']
    else:
        print(f"Error creating invoice: {response.text}")
        return None

def check_invoice_status(invoice_id):
    headers = {'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN}
    response = requests.get(f'{CRYPTOBOT_API_URL}/getInvoices?invoice_ids={invoice_id}', headers=headers)
    if response.status_code == 200:
        invoice = response.json()['result']['items'][0]
        return invoice['status']
    return None

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = TelegramClient('bot_session15', API_ID, API_HASH)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –≤–∞—Ä–µ–Ω–∏–∫–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã:",
        buttons=[
            [Button.inline("ü•ü –ó–∞–∫–∞–∑–∞—Ç—å –≤–∞—Ä–µ–Ω–∏–∫–∏", b"vareniki")],
            [Button.inline("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", b"profile")],
            [Button.inline("üìú –¶–µ–Ω—ã", b"price")]
        ]
    )

@bot.on(events.CallbackQuery(data=b'price'))
async def price(event):
    await event.respond(
        "ü•ü –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
        buttons=[
            [Button.inline("ü•ü 1 –¥–µ–Ω—å - 1$", b"day")],
            [Button.inline("ü•ü 7 –¥–Ω–µ–π - 4$", b"week")],
            [Button.inline("ü•ü 30 –¥–Ω–µ–π - 10$", b"month")]
        ]
    )

@bot.on(events.CallbackQuery(data=b'profile'))
async def profile(event):
    user_id = event.sender_id
    sub = is_subscribed(user_id)
    text = f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\nüÜî ID: {user_id}\n</b>"
    if sub:
        expire = subscriptions[str(user_id)]
        dt = datetime.fromisoformat(expire)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        left = dt - datetime.now(timezone.utc)
        minutes_left = int(left.total_seconds() // 60)
        text += f"<b>‚ú® –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <code>{dt}</code> UTC\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: <code>{minutes_left}</code> –º–∏–Ω.</b>"
    else:
        text += "<b>‚ú® –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>"
    await event.respond(text, parse_mode='html')

@bot.on(events.NewMessage(pattern=r'/sub'))
async def give_sub(event):
    if event.sender_id != OWNER_ID:
        return await event.respond("<b>‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>", parse_mode='html')

    args = event.raw_text.split()
    if len(args) != 3 or not args[2].isdigit():
        return await event.respond("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /sub @username 30")

    username = args[1].lstrip('@')
    minutes = int(args[2])

    try:
        user = await bot.get_entity(username)
        set_subscription(user.id, minutes)
        await event.respond(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è @{username} –Ω–∞ {minutes} –º–∏–Ω—É—Ç.", parse_mode='html')
    except Exception as e:
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}", parse_mode='html')

# === –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ===
@bot.on(events.CallbackQuery(data=b'day'))
async def handle_day_subscription(event):
    user_id = event.sender_id
    amount = 1.0  # $1 for 1 day
    duration = 1440  # 1 day in minutes
    invoice = create_invoice(amount, description='1 Day Subscription')
    if invoice:
        pending_payments[user_id] = {'invoice_id': invoice['invoice_id'], 'amount': amount, 'duration': duration}
        await event.respond(
            f"<b>üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å (1$):</b>\n"
            f"üëâ <a href='{invoice['pay_url']}'>–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot</a>\n\n",
            "<b>üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É - /check_payment.</b>",
            parse_mode='html',
            link_preview=False
        )
    else:
        await event.respond("<b>‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode='html')

@bot.on(events.CallbackQuery(data=b'week'))
async def handle_week_subscription(event):
    user_id = event.sender_id
    amount = 4.0  # $4 for 7 days
    duration = 10080  # 7 days in minutes
    invoice = create_invoice(amount, description='7 Days Subscription')
    if invoice:
        pending_payments[user_id] = {'invoice_id': invoice['invoice_id'], 'amount': amount, 'duration': duration}
        await event.respond(
            f"<b>üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π (4$):</b>\n"
            f"üëâ <a href='{invoice['pay_url']}'>–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot</a>\n\n",
            "<b>üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É - /check_payment.</b>",
            parse_mode='html',
            link_preview=False
        )
    else:
        await event.respond("<b>‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode='html')

@bot.on(events.CallbackQuery(data=b'month'))
async def handle_month_subscription(event):
    user_id = event.sender_id
    amount = 10.0  # $10 for 30 days
    duration = 43200  # 30 days in minutes
    invoice = create_invoice(amount, description='30 Days Subscription')
    if invoice:
        pending_payments[user_id] = {'invoice_id': invoice['invoice_id'], 'amount': amount, 'duration': duration}
        await event.respond(
            f"<b>üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π (10$):</b>\n"
            f"üëâ <a href='{invoice['pay_url']}'>–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot</a>\n\n",
            "<b>üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É - /check_payment.</b>",
            parse_mode='html',
            link_preview=False
        )
    else:
        await event.respond("<b>‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode='html')

@bot.on(events.NewMessage(pattern=r'/check_payment'))
async def check_payment(event):
    user_id = event.sender_id
    if user_id not in pending_payments:
        await event.respond("<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.</b>", parse_mode='html')
        return

    payment = pending_payments[user_id]
    invoice_id = payment['invoice_id']
    status = check_invoice_status(invoice_id)

    if status == 'paid':
        set_subscription(user_id, payment['duration'])
        await event.respond(
            f"<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {payment['duration']//1440} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            parse_mode='html'
        )
        await bot.send_message(LOG_ID, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {payment['duration']//1440} –¥–Ω–µ–π")
        del pending_payments[user_id]
    elif status == 'active':
        await event.respond("<b>‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode='html')
    else:
        await event.respond("<b>‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ —Å—á–µ—Ç –∏—Å—Ç–µ–∫.</b>", parse_mode='html')
        del pending_payments[user_id]

# === –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò ===
@bot.on(events.CallbackQuery(data=b'vareniki'))
async def handle_order(event):
    user_id = event.sender_id

    if not is_subscribed(user_id):
        await event.respond("<b>‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>", parse_mode='html')
        return

    user_states[user_id] = 'awaiting_username'
    await event.respond(
        "<b>üîó –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Ä–µ–Ω–∏–∫–∏:</b>\n\n<code>–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: username</code>",
        parse_mode='html'
    )

@bot.on(events.NewMessage)
async def message_handler(event):
    user_id = event.sender_id
    if user_states.get(user_id) != 'awaiting_username':
        return

    username = event.raw_text.strip().lstrip('@')
    user_states.pop(user_id, None)

    if not is_subscribed(user_id):
        return await event.respond("<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.</b>", parse_mode='html')

    await event.respond(
        f"<b>‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—Ä–µ–Ω–∏–∫–∏ –∫ </b><code>@{username}</code><b>...</b>",
        parse_mode='html'
    )

    success, fail = 0, 0
    for client in session_clients:
        try:
            user = await client.get_entity(username)

            # –ñ–∞–ª–æ–±–∞: –°–ø–∞–º
            await client(ReportPeerRequest(
                peer=user,
                reason=InputReportReasonSpam(),
                message="–°–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            ))
            await asyncio.sleep(1)

            # –ñ–∞–ª–æ–±–∞: –§–µ–π–∫
            await client(ReportPeerRequest(
                peer=user,
                reason=InputReportReasonFake(),
                message="–ü–æ–¥–¥–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
            ))
            await asyncio.sleep(1)

            # –ñ–∞–ª–æ–±–∞: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
            await client(ReportPeerRequest(
                peer=user,
                reason=InputReportReasonOther(),
                message="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
            ))
            await asyncio.sleep(1)

            success += 1
        except Exception as e:
            fail += 1
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–± —Å {client.session.filename}: {e}")

    await event.respond(
        f"<b>‚úÖ –í–∞—Ä–µ–Ω–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>\n\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{username}</code>\nüì¶ –í–∞—Ä–µ–Ω–∏–∫–æ–≤: <code>{success}</code>\n‚ö† –û—à–∏–±–æ–∫: <code>{fail}</code>",
        parse_mode='html'
    )
    await event.client.send_message(LOG_ID, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—ã –Ω–∞ @{username}")

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("[*] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏...")
    load_sessions()
    load_subs()
    for client in session_clients:
        await client.connect()
    print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(session_clients)}")

    await bot.start(bot_token=BOT_TOKEN)
    print("[+] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())